<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浏览器缓存</title>
    <link href="/2023/09/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <url>/2023/09/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>浏览器缓存分为<code>强缓存</code>和<code>协商缓存</code>。</p><p>先从 <b>http header</b> 判断是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器。</p><p>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些 <b>request header</b> 验证这个资源是否命中协商缓存，称为 <code>http 再验证</code>。如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源。</p><p>强缓存和协商缓存的共同之处在于，如果命中换成，服务器都不会返回资源；</p><p>区别是强缓存不发送请求到服务器，而协商缓存会。</p><p>当协商缓存也没命中时，服务器就会讲资源发送到客户端</p><p>当按下 <font color="#54FF9F">ctrl+F5</font> 时，跳过强缓存和协商缓存，直接从服务器加载资源</p><p>当 <font color="#54FF9F">F5</font> 刷新网页时，跳过强缓存，但是会检查协商缓存</p><hr><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><h3 id="强缓存的规则"><a href="#强缓存的规则" class="headerlink" title="强缓存的规则"></a>强缓存的规则</h3><p>当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是<code>Expires</code>和<code>Cache-Control</code>，其中<code>Cache-Control</code>优先级比<code>Expires</code>高。</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a><code>Expires</code></h3><p>该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间。值为服务器返回改请求结果缓存的到期时间，即再次发起请求时，如果客户端的时间小于 <code>Expires</code> 的值时，直接使用缓存结果。</p><h3 id="Cache-Control-max-age"><a href="#Cache-Control-max-age" class="headerlink" title="Cache-Control:max-age"></a><code>Cache-Control:max-age</code></h3><p>该字段是 http1.1 的规范，作为替换 expires。强缓存利用其 max-age 值来判断缓存资源的最大生命周期。</p><p>取值为：</p><ul><li>public 所有内容都被换成（客户端和代理服务器都可以缓存）</li><li>private 所有内容只有客户端可以缓存，Cache-control 默认取值</li><li>no-cache 客户端缓存内容 但是是否使用缓存则需要经过协商缓存来验证决定</li><li>no-store 所有内容都不会缓存，即不使用强制缓存也不使用协商缓存</li><li>max-age&#x3D;xxx 缓存内容将在 xxx 秒后失效</li></ul><blockquote><p>浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？</p></blockquote><p>Status 状态码为灰色的请求则代表使用了强制缓存，请求对应的 Size 值则代表该缓存存放的位置，分别为 from memory cache 和 from disk cache。</p><p>from memory cache 代表使用内存中的缓存，from disk cache 则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为 memory –&gt; disk。</p><p>内存缓存(from memory cache)和硬盘缓存(from disk cache)差异：</p><p>内存缓存(from memory cache)：内存缓存具有两个特点，分别是快速读取和时效性：</p><p>快速读取： 内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以便下次运行使用时快速读取</p><p>时效性： 一旦进程关闭，该进程的内存就会被清空</p><p>硬盘缓存： 硬盘缓存是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行 IO 操作，然后重新解析改内存内容，速度慢。</p><p>在浏览器中，浏览器会在 js 和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)；而 css 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：</p><p>协商缓存生效 状态码返回 304</p><img src="/2023/09/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/1.png" class="" title="协商缓存生效"><p>协商缓存失效，返回 200 和请求结果结果，如下:</p><img src="/2023/09/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/2.png" class="" title="协商缓存失效"><p>同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<code>Last-Modified / If-Modified-Since</code>和 <code>Etag / If-None-Match</code>，其中 Etag &#x2F; If-None-Match 的优先级比<code>Last-Modified / If-Modified-Since</code>高。</p><h3 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified&#x2F; If-Modified-Since"></a><code>Last-Modified</code>&#x2F; <code>If-Modified-Since</code></h3><p>值为资源最后的更新时间，随服务器 response 返回。</p><p><code>Last-Modified</code> 是服务器响应请求时，返回该资源文件在服务器最后被修改的时间。</p><p><code>If-Modified-Since</code>则是客户端再次发起请求时，携带上次请求返回的 Last-Modified 值,通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有<code>If-Modified-Since</code>字段，则会根据<code>If-Modified-Since</code>字段值与该资源在服务器上的最后被修改时间做比对，若服务器最后被修改时间大于<code>If-Modified-Since</code>字段值，则返回资源，状态码为 200。否则返回 304，代表资源没有更新继续使用缓存文件。</p><h3 id="ETag-If-None-Match"><a href="#ETag-If-None-Match" class="headerlink" title="ETag &#x2F; If-None-Match"></a><code>ETag</code> &#x2F; <code>If-None-Match</code></h3><p>ETag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)</p><p><code>If-None-Match</code>是客户端再次发起该请求时，携带上次请求返回的唯一标识<code>ETag</code>值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有<code>If-None-Match</code>，则会根据<code>If-None-Match</code>的字段值与该资源在服务器的<code>ETag</code>值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200</p>]]></content>
    
    
    
    <tags>
      
      <tag>review</tag>
      
      <tag>browser</tag>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包（closure）</title>
    <link href="/2023/09/04/closure/"/>
    <url>/2023/09/04/closure/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>闭包</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React cookbook</title>
    <link href="/2023/08/18/React-cookbook/"/>
    <url>/2023/08/18/React-cookbook/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css">]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/17/hello-world/"/>
    <url>/2023/08/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AMD &amp;&amp; CMD &amp;&amp; CommonJs &amp;&amp; UMD &amp;&amp; ES</title>
    <link href="/2023/08/17/umd&amp;amd&amp;es&amp;cjs/"/>
    <url>/2023/08/17/umd&amp;amd&amp;es&amp;cjs/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><span class="hint--info hint--rounded hint--top" data-hint="Asynchronous Module Definition" ontouchstart>AMD</span> 是一种异步模块加载规范，专为浏览器设计。全称是 Asynchronous Module Definition,中文名称是异步模块定义。<p>提供定义模块及异步加载该模块依赖的机制，这和浏览器的异步加载模块的环境刚好适应（浏览器同步加载会导致性能，可用性，调试和跨域访问等问题）。但浏览器并不支持 AMD 模块，在浏览器端，需要借助 RequireJS 才能加载 AMD 模块。</p><p>AMD 规范中定义模块的的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(id?: <span class="hljs-title class_">String</span>, dependencies?: <span class="hljs-title class_">String</span>[], <span class="hljs-attr">factory</span>: <span class="hljs-title class_">Function</span>|<span class="hljs-title class_">Object</span>);<br></code></pre></td></tr></table></figure><p><code>id</code>: 模块的名称是个字符串，这个参数是可选的。如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字。如果提供了该参数，模块名必须是“顶级”的和绝对的（不允许相对名字）。</p><p>模块名的格式：模块名用来唯一标识定义中模块，它们同样在依赖数组中使用。AMD 的模块名规范是 CommonJS 模块名规范的超集。引用如下：</p><ul><li>模块名是由一个或多个单词以正斜杠为分隔符拼接成的字符串</li><li>单词须为驼峰形式，或者”.”，”..”</li><li>模块名不允许文件扩展名的形式，如”.js”</li><li>模块名可以为 “相对的” 或 “顶级的”。如果首字符为”.”或”..”则为”相对的”模块名</li><li>顶级的模块名从根命名空间的概念模块解析</li><li>相对的模块名从 “require” 书写和调用的模块解析</li><li>上面所说到的 CommonJS 模块 id 属性常被用于 JavaScript 模块。</li></ul><p>相对模块名解析示例：</p><ul><li>如果模块 “a&#x2F;b&#x2F;c” 请求 “..&#x2F;d”, 则解析为”a&#x2F;d”</li><li>如果模块 “a&#x2F;b&#x2F;c” 请求 “.&#x2F;e”, 则解析为”a&#x2F;b&#x2F;e”</li></ul><p><code>dependencies</code>: 是个定义中模块所依赖模块的数组。依赖模块必须根据模块的工厂方法优先级执行，并且执行的结果应该按照依赖数组中的位置顺序以参数的形式传入（定义中模块的）工厂方法中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;&#125;）<br></code></pre></td></tr></table></figure><p><code>factory</code>: 是最后一个参数，它包裹了模块的具体实现，它是一个函数或者对象。如果是函数，那么它的返回值就是模块的输出接口或值。</p><p>AMD 模块使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>([<span class="hljs-string">&quot;模块名&quot;</span>], callback);<br></code></pre></td></tr></table></figure><p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>通用模块定义，其提供了模块定义和按需加载执行模块。它解决的问题和 AMD 规范是一样的，只不过在模块定义方式和模块加载时机上不同，CMD 也需要额外的引入第三方的库文件，SeaJS,SeaJS 推崇一个模块一个文件</p><p>在 CMD 规范中，一个文件就是一个模块，使用 define 来进行定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(factory);<br></code></pre></td></tr></table></figure><p>这里的 define 是一个全局函数，用来定义模块，这里的 factory 参数既可以是函数，又可以是字符串或对象。如果参数是字符串或对象时，表示该模块的接口就是该对象或字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(&#123; <span class="hljs-attr">website</span>: <span class="hljs-string">&quot;oecom&quot;</span> &#125;);<br><span class="hljs-title function_">define</span>(<span class="hljs-string">&quot;这里是OECOM&quot;</span>);<br></code></pre></td></tr></table></figure><p>当 factory 为函数时，此函数就是模块的构造方法，该函数默认为提供三个参数：require,exports,module</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;&#125;);<br></code></pre></td></tr></table></figure><p>– <strong><code>require</code></strong> –</p><ul><li>同步加载</li></ul><p>require 参数也是一个方法，接收的参数为模块标识，其实就是需要加载模块的相对路径，作用就是加载其他模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./a&quot;</span>);<br>  a.<span class="hljs-title function_">out</span>(); <span class="hljs-comment">//假设模块a有out方法。</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>异步加载<br>直接使用 require 加载属于是同步加载，require 提供了 async 方法来在模块内部进行异步加载模块，并在加载完成以后执行指定的回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br>  <span class="hljs-built_in">require</span>.<span class="hljs-title function_">async</span>(<span class="hljs-string">&quot;./a&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>    a.<span class="hljs-title function_">doSomething</span>();<br>  &#125;);<br><br>  <span class="hljs-built_in">require</span>.<span class="hljs-title function_">async</span>([<span class="hljs-string">&quot;./c&quot;</span>, <span class="hljs-string">&quot;./b&quot;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">c, b</span>) &#123;<br>    c.<span class="hljs-title function_">doSomething</span>();<br>    b.<span class="hljs-title function_">doSomething</span>();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<code>require</code> 是同步往下执行，<code>require.async</code> 则是异步回调执行。<code>require.async</code> 一般用来加载可延迟异步加载的模块。</p><ul><li>获取模块路径<br>require.resolve 使用模块系统内部的路径解析机制来解析并返回模块路径。该函数不会加载模块，只返回解析后的绝对路径。</li></ul><p>– <strong><code>exports</code></strong> –</p><p>exports 是一个用来想外接提供模块接口的对象</p><p>提示：exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports 重新赋值时，并不会改变 module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口。</p><p>还有一点就是导出模块不要写在回调函数里，导出是需要同步执行，否则导入是会导入失败。</p><h2 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a>commonJS</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Node.js 中采用此规范，每一个文件就是一个模块，有自己的作用域，模块中的变量，函数，类都是私有的。</p><p>CommonJS 规范规定，每个模块内部，<code>module</code>变量代表当前模块。这个变量是一个对象，它的<code>exports</code>属性（即<code>module.exports</code>）是对外的接口。加载某个模块，其实是加载该模块的<code>module.exports</code>属性。</p><p>使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模块</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> addX = <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> value + x;<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">x</span> = x;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">addX</span> = addX;<br></code></pre></td></tr></table></figure><p>CommonJS 模块的特点如下：</p><blockquote><p>所有代码都运行在模块作用域，不会污染全局作用域。<br>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。<br>模块加载的顺序，按照其在代码中出现的顺序。</p></blockquote><h3 id="module-对象"><a href="#module-对象" class="headerlink" title="module 对象"></a>module 对象</h3><p>所有模块都是<code>Module</code>的实例。每个模块内部都有一个 module 对象，代表当前模块。有如下属性：</p><ul><li><code>module.id</code> 模块的识别符，通常是带有绝对路径的模块文件名。</li><li><code>module.filename</code> 模块的文件名，带有绝对路径。</li><li><code>module.loaded</code> 返回一个布尔值，表示模块是否已经完成加载。</li><li><code>module.parent</code> 返回一个对象，表示调用该模块的模块。</li><li><code>module.children</code> 返回一个数组，表示该模块要用到的其他模块。</li><li><code>module.exports</code> 表示模块对外输出的值。</li></ul><h4 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h4><p><code>module.exports</code>属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取<code>module.exports</code>变量。</p><h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><p>为了方便，Node 为每个模块提供一个<code>exports</code>变量，指向<code>module.exports</code>。这等同在每个模块头部，有一行这样的命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br></code></pre></td></tr></table></figure><p>在对外输出模块接口时，可以向 exports 对象添加方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.<span class="hljs-property">hello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-string">&quot;Hello world&quot;</span>;<br></code></pre></td></tr></table></figure><p>上面代码中，hello 函数是无法对外输出的，因为 module.exports 被重新赋值了。</p><p>这意味着，<strong>如果一个模块的对外接口，就是一个单一的值，不能使用 exports 输出，只能使用 module.exports 输出</strong>。</p><h3 id="AMD-与-CJS-的兼容性"><a href="#AMD-与-CJS-的兼容性" class="headerlink" title="AMD 与 CJS 的兼容性"></a>AMD 与 CJS 的兼容性</h3><p>CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD 规范则是非同步加载模块，允许指定回调函数。由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用 AMD 规范。</p><h3 id="require-命令"><a href="#require-命令" class="headerlink" title="require 命令"></a>require 命令</h3><p>模块的循环加载</p><p>如果发生模块的循环加载，即 A 加载 B，B 又加载 A，则 B 将加载 A 的不完整版本。</p><h3 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h3><p>CommonJS 模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p><p><strong>require 的内部处理流程</strong></p><p>require 指向当前模块的 module.require，而后者又调用 Node 内部命令 Module._load</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Module</span>.<span class="hljs-property">_load</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">request, parent, isMain</span>) &#123;<br>  <span class="hljs-comment">// 1. 检查Module._cache， 是否缓存中存在此模块</span><br>  <span class="hljs-comment">// 2. 如果缓存中不存在，就创建新的Module实例</span><br>  <span class="hljs-comment">// 3. 添加到缓存</span><br>  <span class="hljs-comment">// 4. 使用module.load()加载指定的模块文件,读取文件之后，使用module.compile()执行文件代码</span><br>  <span class="hljs-comment">// 5. 如果加载/解析报错，就从缓存中删除此模块</span><br>  <span class="hljs-comment">// 6. 返回模块的module.exports</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>通用模块加载规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params">root, factory</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">module</span> === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;是commonjs模块规范，nodejs环境&quot;</span>);<br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">factory</span>();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&quot;function&quot;</span> &amp;&amp; define.<span class="hljs-property">amd</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;是AMD模块规范，如require.js&quot;</span>);<br>    <span class="hljs-title function_">define</span>(<span class="hljs-title function_">factory</span>());<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&quot;function&quot;</span> &amp;&amp; define.<span class="hljs-property">cmd</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;是CMD模块规范，如sea.js&quot;</span>);<br>    <span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">factory</span>();<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;没有模块环境，直接挂载在全局对象上&quot;</span>);<br>    root.<span class="hljs-property">umdModule</span> = <span class="hljs-title function_">factory</span>();<br>  &#125;<br>&#125;)(<span class="hljs-variable language_">this</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;我是一个umd模块&quot;</span>,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><p>ES Modules 特性<br>给 script 标签 设置<code>type = module</code> 来告知当前 script 标签中的代码采用 ESM 的规范来执行</p><ul><li>自动采用严格模式</li><li>每个 ESM 模块都是单独的私有作用域</li><li>ESM 的 script 标签会延迟执行脚本，默认加上了 defer 属性</li><li>ESM 是通过 CORS 这种跨域请求的方式 去请求外部 JS 模块的</li></ul><p><strong>export 导出是栈内存中的变量（原始数据类型存储的是值，对象数据类型存储的是堆内存的引用地址）</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
