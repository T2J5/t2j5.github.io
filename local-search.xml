<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/17/hello-world/"/>
    <url>/2023/08/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/08/17/umd&amp;amd&amp;es&amp;cjs/"/>
    <url>/2023/08/17/umd&amp;amd&amp;es&amp;cjs/</url>
    
    <content type="html"><![CDATA[<h1 id="AMD-CMD-CommonJs-UMD-ES"><a href="#AMD-CMD-CommonJs-UMD-ES" class="headerlink" title="AMD &amp;&amp; CMD &amp;&amp; CommonJs &amp;&amp; UMD &amp;&amp; ES"></a>AMD &amp;&amp; CMD &amp;&amp; CommonJs &amp;&amp; UMD &amp;&amp; ES</h1><p><img src="/../../assets/module.png" alt="module"></p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD是一种异步模块加载规范，专为浏览器设计。全称是Asynchronous Module Definition,中文名称是异步模块定义。</p><p>提供定义模块及异步加载该模块依赖的机制，这和浏览器的异步加载模块的环境刚好适应（浏览器同步加载会导致性能，可用性，调试和跨域访问等问题）。但浏览器并不支持AMD模块，在浏览器端，需要借助RequireJS才能加载AMD模块。</p><p>AMD规范中定义模块的的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(id?: <span class="hljs-title class_">String</span>, dependencies?: <span class="hljs-title class_">String</span>[], <span class="hljs-attr">factory</span>: <span class="hljs-title class_">Function</span>|<span class="hljs-title class_">Object</span>);<br></code></pre></td></tr></table></figure><p><code>id</code>: 模块的名称是个字符串，这个参数是可选的。如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字。如果提供了该参数，模块名必须是“顶级”的和绝对的（不允许相对名字）。</p><p>模块名的格式：模块名用来唯一标识定义中模块，它们同样在依赖数组中使用。AMD的模块名规范是CommonJS模块名规范的超集。引用如下：</p><ul><li>模块名是由一个或多个单词以正斜杠为分隔符拼接成的字符串</li><li>单词须为驼峰形式，或者”.”，”..”</li><li>模块名不允许文件扩展名的形式，如”.js”</li><li>模块名可以为 “相对的” 或 “顶级的”。如果首字符为”.”或”..”则为”相对的”模块名</li><li>顶级的模块名从根命名空间的概念模块解析</li><li>相对的模块名从 “require” 书写和调用的模块解析</li><li>上面所说到的CommonJS模块id属性常被用于JavaScript模块。</li></ul><p> 相对模块名解析示例：</p><ul><li>如果模块 “a&#x2F;b&#x2F;c” 请求 “..&#x2F;d”, 则解析为”a&#x2F;d”</li><li>如果模块 “a&#x2F;b&#x2F;c” 请求 “.&#x2F;e”, 则解析为”a&#x2F;b&#x2F;e”</li></ul><p><code>dependencies</code>: 是个定义中模块所依赖模块的数组。依赖模块必须根据模块的工厂方法优先级执行，并且执行的结果应该按照依赖数组中的位置顺序以参数的形式传入（定义中模块的）工厂方法中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;&#125;）<br></code></pre></td></tr></table></figure><p><code>factory</code>: 是最后一个参数，它包裹了模块的具体实现，它是一个函数或者对象。如果是函数，那么它的返回值就是模块的输出接口或值。</p><p>AMD 模块使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;模块名&#x27;</span>], callback)<br></code></pre></td></tr></table></figure><p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>通用模块定义，其提供了模块定义和按需加载执行模块。它解决的问题和AMD规范是一样的，只不过在模块定义方式和模块加载时机上不同，CMD也需要额外的引入第三方的库文件，SeaJS,SeaJS推崇一个模块一个文件</p><p>在CMD规范中，一个文件就是一个模块，使用define来进行定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(factory)<br></code></pre></td></tr></table></figure><p>这里的define是一个全局函数，用来定义模块，这里的factory参数既可以是函数，又可以是字符串或对象。如果参数是字符串或对象时，表示该模块的接口就是该对象或字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(&#123;<span class="hljs-string">&#x27;website&#x27;</span>:<span class="hljs-string">&#x27;oecom&#x27;</span>&#125;);<br><span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;这里是OECOM&#x27;</span>);<br></code></pre></td></tr></table></figure><p>当factory为函数时，此函数就是模块的构造方法，该函数默认为提供三个参数：require,exports,module</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>,<span class="hljs-built_in">exports</span>,<span class="hljs-variable language_">module</span></span>)&#123;<br><br>&#125;)<br></code></pre></td></tr></table></figure><p>– <strong><code>require</code></strong> –</p><ul><li>同步加载</li></ul><p>require参数也是一个方法，接收的参数为模块标识，其实就是需要加载模块的相对路径，作用就是加载其他模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>,<span class="hljs-built_in">exports</span>,<span class="hljs-variable language_">module</span></span>)&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br>    a.<span class="hljs-title function_">out</span>();<span class="hljs-comment">//假设模块a有out方法。</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>异步加载<br>直接使用require加载属于是同步加载，require提供了async方法来在模块内部进行异步加载模块，并在加载完成以后执行指定的回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>,<span class="hljs-built_in">exports</span>,<span class="hljs-variable language_">module</span></span>)&#123;<br>  <span class="hljs-built_in">require</span>.<span class="hljs-title function_">async</span>(<span class="hljs-string">&#x27;./a&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;<br>    a.<span class="hljs-title function_">doSomething</span>()<br>  &#125;)<br><br>  <span class="hljs-built_in">require</span>.<span class="hljs-title function_">async</span>([<span class="hljs-string">&#x27;./c&#x27;</span>,<span class="hljs-string">&#x27;./b&#x27;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">c,b</span>)&#123;<br>    c.<span class="hljs-title function_">doSomething</span>()<br>    b.<span class="hljs-title function_">doSomething</span>()<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<code>require</code> 是同步往下执行，<code>require.async</code> 则是异步回调执行。<code>require.async</code> 一般用来加载可延迟异步加载的模块。</p><ul><li>获取模块路径<br>require.resolve使用模块系统内部的路径解析机制来解析并返回模块路径。该函数不会加载模块，只返回解析后的绝对路径。</li></ul><p>– <strong><code>exports</code></strong> –</p><p>exports是一个用来想外接提供模块接口的对象</p><p>提示：exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports重新赋值时，并不会改变 module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口。</p><p>还有一点就是导出模块不要写在回调函数里，导出是需要同步执行，否则导入是会导入失败。</p><h2 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a>commonJS</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Node.js中采用此规范，每一个文件就是一个模块，有自己的作用域，模块中的变量，函数，类都是私有的。</p><p>CommonJS规范规定，每个模块内部，<code>module</code>变量代表当前模块。这个变量是一个对象，它的<code>exports</code>属性（即<code>module.exports</code>）是对外的接口。加载某个模块，其实是加载该模块的<code>module.exports</code>属性。</p><p>使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模块</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> addX = <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> value + x;<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">x</span> = x;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">addX</span> = addX;<br></code></pre></td></tr></table></figure><p>CommonJS模块的特点如下：</p><blockquote><p>所有代码都运行在模块作用域，不会污染全局作用域。<br>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。<br>模块加载的顺序，按照其在代码中出现的顺序。</p></blockquote><h3 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h3><p>所有模块都是<code>Module</code>的实例。每个模块内部都有一个module对象，代表当前模块。有如下属性：</p><ul><li><code>module.id</code> 模块的识别符，通常是带有绝对路径的模块文件名。</li><li><code>module.filename</code> 模块的文件名，带有绝对路径。</li><li><code>module.loaded</code> 返回一个布尔值，表示模块是否已经完成加载。</li><li><code>module.parent</code> 返回一个对象，表示调用该模块的模块。</li><li><code>module.children</code> 返回一个数组，表示该模块要用到的其他模块。</li><li><code>module.exports</code> 表示模块对外输出的值。</li></ul><h4 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h4><p><code>module.exports</code>属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取<code>module.exports</code>变量。</p><h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><p>为了方便，Node为每个模块提供一个<code>exports</code>变量，指向<code>module.exports</code>。这等同在每个模块头部，有一行这样的命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br></code></pre></td></tr></table></figure><p>在对外输出模块接口时，可以向exports对象添加方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.<span class="hljs-property">hello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-string">&#x27;Hello world&#x27;</span>;<br></code></pre></td></tr></table></figure><p>上面代码中，hello函数是无法对外输出的，因为module.exports被重新赋值了。</p><p>这意味着，<strong>如果一个模块的对外接口，就是一个单一的值，不能使用exports输出，只能使用module.exports输出</strong>。</p><h3 id="AMD与CJS的兼容性"><a href="#AMD与CJS的兼容性" class="headerlink" title="AMD与CJS的兼容性"></a>AMD与CJS的兼容性</h3><p>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。</p><h3 id="require命令"><a href="#require命令" class="headerlink" title="require命令"></a>require命令</h3><p>模块的循环加载</p><p>如果发生模块的循环加载，即A加载B，B又加载A，则B将加载A的不完整版本。</p><h3 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h3><p>CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p><p><strong>require的内部处理流程</strong></p><p>require 指向当前模块的module.require，而后者又调用Node内部命令Module._load</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Module</span>.<span class="hljs-property">_load</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">request, parent, isMain</span>) &#123;<br>  <span class="hljs-comment">// 1. 检查Module._cache， 是否缓存中存在此模块</span><br>  <span class="hljs-comment">// 2. 如果缓存中不存在，就创建新的Module实例</span><br>  <span class="hljs-comment">// 3. 添加到缓存</span><br>  <span class="hljs-comment">// 4. 使用module.load()加载指定的模块文件,读取文件之后，使用module.compile()执行文件代码</span><br>  <span class="hljs-comment">// 5. 如果加载/解析报错，就从缓存中删除此模块</span><br>  <span class="hljs-comment">// 6. 返回模块的module.exports</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>通用模块加载规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params">root, factory</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">module</span> === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;是commonjs模块规范，nodejs环境&#x27;</span>)<br>        <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">factory</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="hljs-property">amd</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;是AMD模块规范，如require.js&#x27;</span>)<br>        <span class="hljs-title function_">define</span>(<span class="hljs-title function_">factory</span>())<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="hljs-property">cmd</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;是CMD模块规范，如sea.js&#x27;</span>)<br>        <span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br>            <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">factory</span>()<br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;没有模块环境，直接挂载在全局对象上&#x27;</span>)<br>        root.<span class="hljs-property">umdModule</span> = <span class="hljs-title function_">factory</span>();<br>    &#125;<br>&#125;(<span class="hljs-variable language_">this</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;我是一个umd模块&#x27;</span><br>    &#125;<br>&#125;))<br></code></pre></td></tr></table></figure><h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><p>ES Modules 特性<br>给script标签 设置<code>type = module</code> 来告知当前script标签中的代码采用ESM的规范来执行</p><ul><li>自动采用严格模式</li><li>每个ESM模块都是单独的私有作用域</li><li>ESM 的 script 标签会延迟执行脚本，默认加上了defer属性</li><li>ESM 是通过 CORS这种跨域请求的方式 去请求外部 JS 模块的</li></ul><p><strong>export 导出是栈内存中的变量（原始数据类型存储的是值，对象数据类型存储的是堆内存的引用地址）</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
